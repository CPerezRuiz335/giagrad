:py:mod:`giagrad.nn.layers`
===========================

.. py:module:: giagrad.nn.layers


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   dropout/index.rst
   layers/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   giagrad.nn.layers.Linear
   giagrad.nn.layers.Dropout
   giagrad.nn.layers.Dropout1d
   giagrad.nn.layers.Dropout2d
   giagrad.nn.layers.Dropout3d




.. py:class:: Linear(in_features: int, out_features: int, bias: bool = True)

   Bases: :py:obj:`giagrad.nn.module.Module`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: __call__(x: giagrad.tensor.Tensor) -> giagrad.tensor.Tensor


   .. py:method:: __str__()

      Return str(self).



.. py:class:: Dropout(p: float = 0.5)

   Bases: :py:obj:`giagrad.nn.module.Module`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: __call__(x: giagrad.tensor.Tensor) -> giagrad.tensor.Tensor


   .. py:method:: __str__()

      Return str(self).



.. py:class:: Dropout1d(p: float = 0.5)

   Bases: :py:obj:`DropoutNd`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: __check(ndim: int)



.. py:class:: Dropout2d(p: float)

   Bases: :py:obj:`DropoutNd`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: __check(ndim: int)



.. py:class:: Dropout3d(p: float)

   Bases: :py:obj:`DropoutNd`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: __check(ndim: int)



